{"version":3,"names":["Translator","ee","nanoid","throttle","DefaultStore","getFileType","getFileNameAndExtension","generateFileID","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","Restricter","defaultOptions","defaultRestrictionOptions","RestrictionError","packageJson","locale","Symbol","for","Uppy","constructor","opts","Object","create","Set","updateOnlineStatus","bind","defaultLocale","id","autoProceed","allowMultipleUploadBatches","debug","restrictions","meta","onBeforeFileAdded","currentFile","onBeforeUpload","files","store","logger","infoTimeout","log","VERSION","i18nInit","calculateProgress","leading","trailing","setState","plugins","currentUploads","allowNewUpload","capabilities","uploadProgress","individualCancellation","resumableUploads","totalProgress","info","recoveredState","i18n","subscribe","prevState","nextState","patch","emit","updateAll","window","event","args","on","callback","once","off","state","iteratePlugins","plugin","update","getState","setFileState","fileID","Error","translator","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","resetProgress","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","keys","forEach","updatedFile","progress","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","data","updatedMeta","setFileMeta","newMeta","getFile","getFiles","values","getObjectOfFilesPerState","filesObject","error","inProgressFiles","filter","newFiles","file","startedFiles","preprocess","postprocess","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","length","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateRestrictions","validate","err","checkIfFileAlreadyExists","addFile","newFile","name","type","addFiles","fileDescriptors","errors","i","push","isRestriction","message","subError","smart_count","details","AggregateError","removeFiles","fileIDs","reason","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","undefined","uploadID","newFileIDs","stateUpdate","calculateTotalProgress","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","retryUpload","logout","provider","canHavePercentage","Number","isFinite","bytesTotal","Math","round","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","averageSize","uploadedSize","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","TypeError","pluginId","existsPluginAlready","getPlugin","install","foundPlugin","find","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","close","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","restore","reject","addResultData","currentUpload","result","upload","uploader","onBeforeUploadResult","then","validateMinNumberOfFiles","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","trim","missingFields","getMissingRequiredMetaFields","missingRequiredMetaFields","success","fileDescriptor","File","size","fileType","fileName","fileExtension","extension","isRemote","Boolean","source","remote","preview","onBeforeFileAddedResult","filesArray","map","scheduledAutoProceed","stack","errorHandler","response","errorMsg","newError","Date","now","uploadResp","mode","uploadURL","addEventListener","allowMultipleUploads","step","restoreStep","steps","updatedUpload","version"],"sources":["Uppy.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n/* global AggregateError */\n\nimport Translator from '@uppy/utils/lib/Translator'\nimport ee from 'namespace-emitter'\nimport { nanoid } from 'nanoid/non-secure'\nimport throttle from 'lodash.throttle'\nimport DefaultStore from '@uppy/store-default'\nimport getFileType from '@uppy/utils/lib/getFileType'\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension'\nimport generateFileID from '@uppy/utils/lib/generateFileID'\nimport supportsUploadProgress from './supportsUploadProgress.js'\nimport getFileName from './getFileName.js'\nimport { justErrorsLogger, debugLogger } from './loggers.js'\nimport {\n  Restricter,\n  defaultOptions as defaultRestrictionOptions,\n  RestrictionError,\n} from './Restricter.js'\n\nimport packageJson from '../package.json'\nimport locale from './locale.js'\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\nclass Uppy {\n  static VERSION = packageJson.version\n\n  /** @type {Record<string, BasePlugin[]>} */\n  #plugins = Object.create(null)\n\n  #restricter\n\n  #storeUnsubscribe\n\n  #emitter = ee()\n\n  #preProcessors = new Set()\n\n  #uploaders = new Set()\n\n  #postProcessors = new Set()\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor (opts) {\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: defaultRestrictionOptions,\n      meta: {},\n      onBeforeFileAdded: (currentFile) => currentFile,\n      onBeforeUpload: (files) => files,\n      store: new DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000,\n    }\n\n    // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n    this.opts = {\n      ...defaultOptions,\n      ...opts,\n      restrictions: {\n        ...defaultOptions.restrictions,\n        ...(opts && opts.restrictions),\n      },\n    }\n\n    // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n    if (opts && opts.logger && opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning')\n    } else if (opts && opts.debug) {\n      this.opts.logger = debugLogger\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`)\n\n    this.i18nInit()\n\n    // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, { leading: true, trailing: true })\n\n    this.store = this.opts.store\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false,\n      },\n      totalProgress: 0,\n      meta: { ...this.opts.meta },\n      info: [],\n      recoveredState: null,\n    })\n\n    this.#restricter = new Restricter(() => this.opts, this.i18n)\n\n    this.#storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch)\n      this.updateAll(nextState)\n    })\n\n    // Exposing uppy object on window for debugging and testing\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this\n    }\n\n    this.#addListeners()\n  }\n\n  emit (event, ...args) {\n    this.#emitter.emit(event, ...args)\n  }\n\n  on (event, callback) {\n    this.#emitter.on(event, callback)\n    return this\n  }\n\n  once (event, callback) {\n    this.#emitter.once(event, callback)\n    return this\n  }\n\n  off (event, callback) {\n    this.#emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n  setState (patch) {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n  getState () {\n    return this.store.getState()\n  }\n\n  /**\n   * Shorthand to set state for a specific file.\n   */\n  setFileState (fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`)\n    }\n\n    this.setState({\n      files: { ...this.getState().files, [fileID]: { ...this.getState().files[fileID], ...state } },\n    })\n  }\n\n  i18nInit () {\n    const translator = new Translator([this.defaultLocale, this.opts.locale])\n    this.i18n = translator.translate.bind(translator)\n    this.i18nArray = translator.translateArray.bind(translator)\n    this.locale = translator.locale\n  }\n\n  setOptions (newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts,\n      restrictions: {\n        ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions),\n      },\n    }\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta)\n    }\n\n    this.i18nInit()\n\n    if (newOpts.locale) {\n      this.iteratePlugins((plugin) => {\n        plugin.setOptions()\n      })\n    }\n\n    // Note: this is not the preact `setState`, it's an internal function that has the same name.\n    this.setState() // so that UI re-renders with new options\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null,\n    }\n    const files = { ...this.getState().files }\n    const updatedFiles = {}\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = { ...files[fileID] }\n      updatedFile.progress = { ...updatedFile.progress, ...defaultProgress }\n      updatedFiles[fileID] = updatedFile\n    })\n\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0,\n    })\n\n    this.emit('reset-progress')\n  }\n\n  addPreProcessor (fn) {\n    this.#preProcessors.add(fn)\n  }\n\n  removePreProcessor (fn) {\n    return this.#preProcessors.delete(fn)\n  }\n\n  addPostProcessor (fn) {\n    this.#postProcessors.add(fn)\n  }\n\n  removePostProcessor (fn) {\n    return this.#postProcessors.delete(fn)\n  }\n\n  addUploader (fn) {\n    this.#uploaders.add(fn)\n  }\n\n  removeUploader (fn) {\n    return this.#uploaders.delete(fn)\n  }\n\n  setMeta (data) {\n    const updatedMeta = { ...this.getState().meta, ...data }\n    const updatedFiles = { ...this.getState().files }\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID], meta: { ...updatedFiles[fileID].meta, ...data } }\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles,\n    })\n  }\n\n  setFileMeta (fileID, data) {\n    const updatedFiles = { ...this.getState().files }\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID)\n      return\n    }\n    const newMeta = { ...updatedFiles[fileID].meta, ...data }\n    updatedFiles[fileID] = { ...updatedFiles[fileID], meta: newMeta }\n    this.setState({ files: updatedFiles })\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Get all files in an array.\n   */\n  getFiles () {\n    const { files } = this.getState()\n    return Object.values(files)\n  }\n\n  getObjectOfFilesPerState () {\n    const { files: filesObject, totalProgress, error } = this.getState()\n    const files = Object.values(filesObject)\n    const inProgressFiles = files.filter(({ progress }) => !progress.uploadComplete && progress.uploadStarted)\n    const newFiles =  files.filter((file) => !file.progress.uploadStarted)\n    const startedFiles = files.filter(\n      file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess,\n    )\n    const uploadStartedFiles = files.filter((file) => file.progress.uploadStarted)\n    const pausedFiles = files.filter((file) => file.isPaused)\n    const completeFiles = files.filter((file) => file.progress.uploadComplete)\n    const erroredFiles = files.filter((file) => file.error)\n    const inProgressNotPausedFiles = inProgressFiles.filter((file) => !file.isPaused)\n    const processingFiles = files.filter((file) => file.progress.preprocess || file.progress.postprocess)\n\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100\n        && completeFiles.length === files.length\n        && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost),\n    }\n  }\n\n  /*\n  * @constructs\n  * @param { Error } error\n  * @param { undefined } file\n  */\n  /*\n  * @constructs\n  * @param { RestrictionError } error\n  * @param { UppyFile | undefined } file\n  */\n  #informAndEmit (error, file) {\n    const { message, details = '' } = error\n\n    if (error.isRestriction) {\n      this.emit('restriction-failed', file, error)\n    } else {\n      this.emit('error', error)\n    }\n    this.info({ message, details }, 'error', this.opts.infoTimeout)\n    this.log(`${message} ${details}`.trim(), 'error')\n  }\n\n  validateRestrictions (file, files = this.getFiles()) {\n    try {\n      this.#restricter.validate(file, files)\n    } catch (err) {\n      return err\n    }\n    return null\n  }\n\n  #checkRequiredMetaFieldsOnFile (file) {\n    const { missingFields, error } = this.#restricter.getMissingRequiredMetaFields(file)\n\n    if (missingFields.length > 0) {\n      this.setFileState(file.id, { missingRequiredMetaFields: missingFields })\n      this.log(error.message)\n      this.emit('restriction-failed', file, error)\n      return false\n    }\n    return true\n  }\n\n  #checkRequiredMetaFields (files) {\n    let success = true\n    for (const file of Object.values(files)) {\n      if (!this.#checkRequiredMetaFieldsOnFile(file)) {\n        success = false\n      }\n    }\n    return success\n  }\n\n  #assertNewUploadAllowed (file) {\n    const { allowNewUpload } = this.getState()\n\n    if (allowNewUpload === false) {\n      const error = new RestrictionError(this.i18n('noMoreFilesAllowed'))\n      this.#informAndEmit(error, file)\n      throw error\n    }\n  }\n\n  checkIfFileAlreadyExists (fileID) {\n    const { files } = this.getState()\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object\n   * will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */\n  #checkAndCreateFileStateObject (files, fileDescriptor) {\n    // Uppy expects files in { name, type, size, data } format.\n    // If the actual File object is passed from input[type=file] or drag-drop,\n    // we normalize it to match Uppy file object\n    if (fileDescriptor instanceof File) {\n      // eslint-disable-next-line no-param-reassign\n      fileDescriptor = {\n        name: fileDescriptor.name,\n        type: fileDescriptor.type,\n        size: fileDescriptor.size,\n        data: fileDescriptor,\n      }\n    }\n\n    const fileType = getFileType(fileDescriptor)\n    const fileName = getFileName(fileType, fileDescriptor)\n    const fileExtension = getFileNameAndExtension(fileName).extension\n    const isRemote = Boolean(fileDescriptor.isRemote)\n    const fileID = generateFileID({\n      ...fileDescriptor,\n      type: fileType,\n    })\n\n    if (this.checkIfFileAlreadyExists(fileID)) {\n      const error = new RestrictionError(this.i18n('noDuplicates', { fileName }))\n      this.#informAndEmit(error, fileDescriptor)\n      throw error\n    }\n\n    const meta = fileDescriptor.meta || {}\n    meta.name = fileName\n    meta.type = fileType\n\n    // `null` means the size is unknown.\n    const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null\n\n    let newFile = {\n      source: fileDescriptor.source || '',\n      id: fileID,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: {\n        ...this.getState().meta,\n        ...meta,\n      },\n      type: fileType,\n      data: fileDescriptor.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null,\n      },\n      size,\n      isRemote,\n      remote: fileDescriptor.remote || '',\n      preview: fileDescriptor.preview,\n    }\n\n    const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files)\n\n    if (onBeforeFileAddedResult === false) {\n      // Don’t show UI info for this error, as it should be done by the developer\n      const error = new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.')\n      this.emit('restriction-failed', fileDescriptor, error)\n      throw error\n    } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n      newFile = onBeforeFileAddedResult\n    }\n\n    try {\n      const filesArray = Object.keys(files).map(i => files[i])\n      this.#restricter.validate(newFile, filesArray)\n    } catch (err) {\n      this.#informAndEmit(err, newFile)\n      throw err\n    }\n\n    return newFile\n  }\n\n  // Schedule an upload if `autoProceed` is enabled.\n  #startIfAutoProceed () {\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null\n        this.upload().catch((err) => {\n          if (!err.isRestriction) {\n            this.log(err.stack || err.message || err)\n          }\n        })\n      }, 4)\n    }\n  }\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile (file) {\n    this.#assertNewUploadAllowed(file)\n\n    const { files } = this.getState()\n    let newFile = this.#checkAndCreateFileStateObject(files, file)\n\n    // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = {\n        ...files[newFile.id],\n        data: file.data,\n        isGhost: false,\n      }\n      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`)\n    }\n\n    this.setState({\n      files: {\n        ...files,\n        [newFile.id]: newFile,\n      },\n    })\n\n    this.emit('file-added', newFile)\n    this.emit('files-added', [newFile])\n    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`)\n\n    this.#startIfAutoProceed()\n\n    return newFile.id\n  }\n\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n  addFiles (fileDescriptors) {\n    this.#assertNewUploadAllowed()\n\n    // create a copy of the files object only once\n    const files = { ...this.getState().files }\n    const newFiles = []\n    const errors = []\n    for (let i = 0; i < fileDescriptors.length; i++) {\n      try {\n        let newFile = this.#checkAndCreateFileStateObject(files, fileDescriptors[i])\n        // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = {\n            ...files[newFile.id],\n            data: fileDescriptors[i].data,\n            isGhost: false,\n          }\n          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`)\n        }\n        files[newFile.id] = newFile\n        newFiles.push(newFile)\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err)\n        }\n      }\n    }\n\n    this.setState({ files })\n\n    newFiles.forEach((newFile) => {\n      this.emit('file-added', newFile)\n    })\n\n    this.emit('files-added', newFiles)\n\n    if (newFiles.length > 5) {\n      this.log(`Added batch of ${newFiles.length} files`)\n    } else {\n      Object.keys(newFiles).forEach(fileID => {\n        this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`)\n      })\n    }\n\n    if (newFiles.length > 0) {\n      this.#startIfAutoProceed()\n    }\n\n    if (errors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n'\n      errors.forEach((subError) => {\n        message += `\\n * ${subError.message}`\n      })\n\n      this.info({\n        message: this.i18n('addBulkFilesFailed', { smart_count: errors.length }),\n        details: message,\n      }, 'error', this.opts.infoTimeout)\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message)\n      } else {\n        const err = new Error(message)\n        err.errors = errors\n        throw err\n      }\n    }\n  }\n\n  removeFiles (fileIDs, reason) {\n    const { files, currentUploads } = this.getState()\n    const updatedFiles = { ...files }\n    const updatedUploads = { ...currentUploads }\n\n    const removedFiles = Object.create(null)\n    fileIDs.forEach((fileID) => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID]\n        delete updatedFiles[fileID]\n      }\n    })\n\n    // Remove files from the `fileIDs` list in each upload.\n    function fileIsNotRemoved (uploadFileID) {\n      return removedFiles[uploadFileID] === undefined\n    }\n\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved)\n\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID]\n        return\n      }\n\n      const { capabilities } = this.getState()\n      if (newFileIDs.length !== currentUploads[uploadID].fileIDs.length\n          && !capabilities.individualCancellation) {\n        throw new Error('individualCancellation is disabled')\n      }\n\n      updatedUploads[uploadID] = {\n        ...currentUploads[uploadID],\n        fileIDs: newFileIDs,\n      }\n    })\n\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles,\n    }\n\n    // If all files were removed - allow new uploads,\n    // and clear recoveredState\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true\n      stateUpdate.error = null\n      stateUpdate.recoveredState = null\n    }\n\n    this.setState(stateUpdate)\n    this.calculateTotalProgress()\n\n    const removedFileIDs = Object.keys(removedFiles)\n    removedFileIDs.forEach((fileID) => {\n      this.emit('file-removed', removedFiles[fileID], reason)\n    })\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`)\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`)\n    }\n  }\n\n  removeFile (fileID, reason = null) {\n    this.removeFiles([fileID], reason)\n  }\n\n  pauseResume (fileID) {\n    if (!this.getState().capabilities.resumableUploads\n         || this.getFile(fileID).uploadComplete) {\n      return undefined\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false\n    const isPaused = !wasPaused\n\n    this.setFileState(fileID, {\n      isPaused,\n    })\n\n    this.emit('upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = { ...updatedFiles[file], isPaused: true }\n      updatedFiles[file] = updatedFile\n    })\n\n    this.setState({ files: updatedFiles })\n    this.emit('pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = { ...this.getState().files }\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null,\n    })\n\n    this.emit('retry-all', filesToRetry)\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: [],\n      })\n    }\n\n    const uploadID = this.#createUpload(filesToRetry, {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  cancelAll ({ reason = 'user' } = {}) {\n    this.emit('cancel-all', { reason })\n\n    // Only remove existing uploads if user is canceling\n    if (reason === 'user') {\n      const { files } = this.getState()\n\n      const fileIDs = Object.keys(files)\n      if (fileIDs.length) {\n        this.removeFiles(fileIDs, 'cancel-all')\n      }\n\n      this.setState({\n        totalProgress: 0,\n        error: null,\n        recoveredState: null,\n      })\n    }\n  }\n\n  retryUpload (fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false,\n    })\n\n    this.emit('upload-retry', fileID)\n\n    const uploadID = this.#createUpload([fileID], {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  logout () {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout()\n      }\n    })\n  }\n\n  calculateProgress (file, data) {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n      return\n    }\n\n    // bytesTotal may be null or zero; in that case we can't divide by it\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0\n    this.setFileState(file.id, {\n      progress: {\n        ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage\n          ? Math.round((data.bytesUploaded / data.bytesTotal) * 100)\n          : 0,\n      },\n    })\n\n    this.calculateTotalProgress()\n  }\n\n  calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles()\n\n    const inProgress = files.filter((file) => {\n      return file.progress.uploadStarted\n        || file.progress.preprocess\n        || file.progress.postprocess\n    })\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0)\n      this.setState({ totalProgress: 0 })\n      return\n    }\n\n    const sizedFiles = inProgress.filter((file) => file.progress.bytesTotal != null)\n    const unsizedFiles = inProgress.filter((file) => file.progress.bytesTotal == null)\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage\n      }, 0)\n      const totalProgress = Math.round((currentProgress / progressMax) * 100)\n      this.setState({ totalProgress })\n      return\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal\n    }, 0)\n    const averageSize = totalSize / sizedFiles.length\n    totalSize += averageSize * unsizedFiles.length\n\n    let uploadedSize = 0\n    sizedFiles.forEach((file) => {\n      uploadedSize += file.progress.bytesUploaded\n    })\n    unsizedFiles.forEach((file) => {\n      uploadedSize += (averageSize * (file.progress.percentage || 0)) / 100\n    })\n\n    let totalProgress = totalSize === 0\n      ? 0\n      : Math.round((uploadedSize / totalSize) * 100)\n\n    // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n    if (totalProgress > 100) {\n      totalProgress = 100\n    }\n\n    this.setState({ totalProgress })\n    this.emit('progress', totalProgress)\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n  #addListeners () {\n    /**\n     * @param {Error} error\n     * @param {object} [file]\n     * @param {object} [response]\n     */\n    const errorHandler = (error, file, response) => {\n      let errorMsg = error.message || 'Unknown error'\n      if (error.details) {\n        errorMsg += ` ${error.details}`\n      }\n\n      this.setState({ error: errorMsg })\n\n      if (file != null && file.id in this.getState().files) {\n        this.setFileState(file.id, {\n          error: errorMsg,\n          response,\n        })\n      }\n    }\n\n    this.on('error', errorHandler)\n\n    this.on('upload-error', (file, error, response) => {\n      errorHandler(error, file, response)\n\n      if (typeof error === 'object' && error.message) {\n        const newError = new Error(error.message)\n        newError.details = error.message\n        if (error.details) {\n          newError.details += ` ${error.details}`\n        }\n        newError.message = this.i18n('failedToUpload', { file: file?.name })\n        this.#informAndEmit(newError)\n      } else {\n        this.#informAndEmit(error)\n      }\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    this.on('upload-started', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: {\n          uploadStarted: Date.now(),\n          uploadComplete: false,\n          percentage: 0,\n          bytesUploaded: 0,\n          bytesTotal: file.size,\n        },\n      })\n    })\n\n    this.on('upload-progress', this.calculateProgress)\n\n    this.on('upload-success', (file, uploadResp) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n\n      const currentProgress = this.getFile(file.id).progress\n      this.setFileState(file.id, {\n        progress: {\n          ...currentProgress,\n          postprocess: this.#postProcessors.size > 0 ? {\n            mode: 'indeterminate',\n          } : null,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal,\n        },\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false,\n      })\n\n      // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n      if (file.size == null) {\n        this.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal,\n        })\n      }\n\n      this.calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress, preprocess: progress },\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      const files = { ...this.getState().files }\n      files[file.id] = { ...files[file.id], progress: { ...files[file.id].progress } }\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getState().files[file.id].progress, postprocess: progress },\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      const files = {\n        ...this.getState().files,\n      }\n      files[file.id] = {\n        ...files[file.id],\n        progress: {\n          ...files[file.id].progress,\n        },\n      }\n      delete files[file.id].progress.postprocess\n\n      this.setState({ files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this.calculateTotalProgress()\n    })\n\n    this.on('dashboard:file-edit-complete', (file) => {\n      if (file) {\n        this.#checkRequiredMetaFieldsOnFile(file)\n      }\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', this.#updateOnlineStatus)\n      window.addEventListener('offline', this.#updateOnlineStatus)\n      setTimeout(this.#updateOnlineStatus, 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online = typeof window.navigator.onLine !== 'undefined'\n      ? window.navigator.onLine\n      : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  #updateOnlineStatus = this.updateOnlineStatus.bind(this)\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.`\n        + ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. `\n        + `Tried to use: '${pluginId}'.\\n`\n        + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.'\n      throw new Error(msg)\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`)\n    }\n\n    if (plugin.type in this.#plugins) {\n      this.#plugins[plugin.type].push(plugin)\n    } else {\n      this.#plugins[plugin.type] = [plugin]\n    }\n    plugin.install()\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n  getPlugin (id) {\n    for (const plugins of Object.values(this.#plugins)) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id)\n      if (foundPlugin != null) return foundPlugin\n    }\n    return undefined\n  }\n\n  [Symbol.for('uppy test: getPlugins')] (type) {\n    return this.#plugins[type]\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n  iteratePlugins (method) {\n    Object.values(this.#plugins).flat(1).forEach(method)\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    this.log(`Removing plugin ${instance.id}`)\n    this.emit('plugin-remove', instance)\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const list = this.#plugins[instance.type]\n    // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n    const index = list.findIndex(item => item.id === instance.id)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n\n    const state = this.getState()\n    const updatedState = {\n      plugins: {\n        ...state.plugins,\n        [instance.id]: undefined,\n      },\n    }\n    this.setState(updatedState)\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close ({ reason } = {}) {\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`)\n\n    this.cancelAll({ reason })\n\n    this.#storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      this.removePlugin(plugin)\n    })\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', this.#updateOnlineStatus)\n      window.removeEventListener('offline', this.#updateOnlineStatus)\n    }\n  }\n\n  hideInfo () {\n    const { info } = this.getState()\n\n    this.setState({ info: info.slice(1) })\n\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: [\n        ...this.getState().info,\n        {\n          type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null,\n        },\n      ],\n    })\n\n    setTimeout(() => this.hideInfo(), duration)\n\n    this.emit('info-visible')\n  }\n\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n  log (message, type) {\n    const { logger } = this.opts\n    switch (type) {\n      case 'error': logger.error(message); break\n      case 'warning': logger.warn(message); break\n      default: logger.debug(message); break\n    }\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this.#removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.#runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n  #createUpload (fileIDs, opts = {}) {\n    // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n    const { forceAllowNewUpload = false } = opts\n\n    const { allowNewUpload, currentUploads } = this.getState()\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.')\n    }\n\n    const uploadID = nanoid()\n\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs,\n    })\n\n    this.setState({\n      allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n\n      currentUploads: {\n        ...currentUploads,\n        [uploadID]: {\n          fileIDs,\n          step: 0,\n          result: {},\n        },\n      },\n    })\n\n    return uploadID\n  }\n\n  [Symbol.for('uppy test: createUpload')] (...args) { return this.#createUpload(...args) }\n\n  #getUpload (uploadID) {\n    const { currentUploads } = this.getState()\n\n    return currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData (uploadID, data) {\n    if (!this.#getUpload(uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n      return\n    }\n    const { currentUploads } = this.getState()\n    const currentUpload = { ...currentUploads[uploadID], result: { ...currentUploads[uploadID].result, ...data } }\n    this.setState({\n      currentUploads: { ...currentUploads, [uploadID]: currentUpload },\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  #removeUpload (uploadID) {\n    const currentUploads = { ...this.getState().currentUploads }\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads,\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  async #runUpload (uploadID) {\n    let { currentUploads } = this.getState()\n    let currentUpload = currentUploads[uploadID]\n    const restoreStep = currentUpload.step || 0\n\n    const steps = [\n      ...this.#preProcessors,\n      ...this.#uploaders,\n      ...this.#postProcessors,\n    ]\n    try {\n      for (let step = restoreStep; step < steps.length; step++) {\n        if (!currentUpload) {\n          break\n        }\n        const fn = steps[step]\n\n        const updatedUpload = {\n          ...currentUpload,\n          step,\n        }\n\n        this.setState({\n          currentUploads: {\n            ...currentUploads,\n            [uploadID]: updatedUpload,\n          },\n        })\n\n        // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        await fn(updatedUpload.fileIDs, uploadID)\n\n        // Update currentUpload value in case it was modified asynchronously.\n        currentUploads = this.getState().currentUploads\n        currentUpload = currentUploads[uploadID]\n      }\n    } catch (err) {\n      this.#removeUpload(uploadID)\n      throw err\n    }\n\n    // Set result data.\n    if (currentUpload) {\n      // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n      currentUpload.fileIDs.forEach((fileID) => {\n        const file = this.getFile(fileID)\n        if (file && file.progress.postprocess) {\n          this.emit('postprocess-complete', file)\n        }\n      })\n\n      const files = currentUpload.fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => !file.error)\n      const failed = files.filter((file) => file.error)\n      await this.addResultData(uploadID, { successful, failed, uploadID })\n\n      // Update currentUpload value in case it was modified asynchronously.\n      currentUploads = this.getState().currentUploads\n      currentUpload = currentUploads[uploadID]\n    }\n    // Emit completion events.\n    // This is in a separate function so that the `currentUploads` variable\n    // always refers to the latest state. In the handler right above it refers\n    // to an outdated object without the `.result` property.\n    let result\n    if (currentUpload) {\n      result = currentUpload.result\n      this.emit('complete', result)\n\n      this.#removeUpload(uploadID)\n    }\n    if (result == null) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n    }\n    return result\n  }\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload () {\n    if (!this.#plugins.uploader?.length) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    let { files } = this.getState()\n\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'))\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult\n      // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n      this.setState({\n        files,\n      })\n    }\n\n    return Promise.resolve()\n      .then(() => this.#restricter.validateMinNumberOfFiles(files))\n      .catch((err) => {\n        this.#informAndEmit(err)\n        throw err\n      })\n      .then(() => {\n        if (!this.#checkRequiredMetaFields(files)) {\n          throw new RestrictionError(this.i18n('missingRequiredMetaField'))\n        }\n      })\n      .catch((err) => {\n        // Doing this in a separate catch because we already emited and logged\n        // all the errors in `checkRequiredMetaFields` so we only throw a generic\n        // missing fields error here.\n        throw err\n      })\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs)\n\n        const waitingFileIDs = []\n        Object.keys(files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if ((!file.progress.uploadStarted) && (currentlyUploadingFiles.indexOf(fileID) === -1)) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this.#createUpload(waitingFileIDs)\n        return this.#runUpload(uploadID)\n      })\n      .catch((err) => {\n        this.emit('error', err)\n        this.log(err, 'error')\n        throw err\n      })\n  }\n}\n\nexport default Uppy\n"],"mappings":"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"}