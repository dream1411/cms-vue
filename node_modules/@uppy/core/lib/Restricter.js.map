{"version":3,"names":["prettierBytes","match","defaultOptions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","RestrictionError","Error","isRestriction","Restricter","constructor","getOpts","i18n","opts","restrictions","Array","isArray","TypeError","validate","file","files","nonGhostFiles","filter","f","isGhost","length","smart_count","isCorrectFileType","some","type","includes","replace","extension","toLowerCase","slice","allowedFileTypesString","join","types","size","totalFilesSize","reduce","total","name","validateMinNumberOfFiles","Object","keys","getMissingRequiredMetaFields","error","fileName","missingFields","field","hasOwn","meta","push"],"sources":["Restricter.js"],"sourcesContent":["/* eslint-disable max-classes-per-file, class-methods-use-this */\nimport prettierBytes from '@transloadit/prettier-bytes'\nimport match from 'mime-match'\n\nconst defaultOptions = {\n  maxFileSize: null,\n  minFileSize: null,\n  maxTotalFileSize: null,\n  maxNumberOfFiles: null,\n  minNumberOfFiles: null,\n  allowedFileTypes: null,\n  requiredMetaFields: [],\n}\n\nclass RestrictionError extends Error {\n  isRestriction = true\n}\n\nclass Restricter {\n  constructor (getOpts, i18n) {\n    this.i18n = i18n\n    this.getOpts = () => {\n      const opts = getOpts()\n\n      if (opts.restrictions.allowedFileTypes != null\n          && !Array.isArray(opts.restrictions.allowedFileTypes)) {\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array')\n      }\n      return opts\n    }\n  }\n\n  validate (file, files) {\n    const { maxFileSize, minFileSize, maxTotalFileSize, maxNumberOfFiles, allowedFileTypes } = this.getOpts().restrictions\n\n    if (maxNumberOfFiles) {\n      const nonGhostFiles = files.filter(f => !f.isGhost)\n      if (nonGhostFiles.length + 1 > maxNumberOfFiles) {\n        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', { smart_count: maxNumberOfFiles })}`)\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some((type) => {\n        // check if this is a mime-type\n        if (type.includes('/')) {\n          if (!file.type) return false\n          return match(file.type.replace(/;.*?$/, ''), type)\n        }\n\n        // otherwise this is likely an extension\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.slice(1).toLowerCase()\n        }\n        return false\n      })\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', { types: allowedFileTypesString }))\n      }\n    }\n\n    // We can't check maxTotalFileSize if the size is unknown.\n    if (maxTotalFileSize && file.size != null) {\n      const totalFilesSize = files.reduce((total, f) => (total + f.size), file.size)\n\n      if (totalFilesSize > maxTotalFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize', {\n          size: prettierBytes(maxTotalFileSize),\n          file: file.name,\n        }))\n      }\n    }\n\n    // We can't check maxFileSize if the size is unknown.\n    if (maxFileSize && file.size != null && file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name,\n      }))\n    }\n\n    // We can't check minFileSize if the size is unknown.\n    if (minFileSize && file.size != null && file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize),\n      }))\n    }\n  }\n\n  validateMinNumberOfFiles (files) {\n    const { minNumberOfFiles } = this.getOpts().restrictions\n    if (Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(this.i18n('youHaveToAtLeastSelectX', { smart_count: minNumberOfFiles }))\n    }\n  }\n\n  getMissingRequiredMetaFields (file) {\n    const error = new RestrictionError(this.i18n('missingRequiredMetaFieldOnFile', { fileName: file.name }))\n    const { requiredMetaFields } = this.getOpts().restrictions\n    const missingFields = []\n\n    for (const field of requiredMetaFields) {\n      if (!Object.hasOwn(file.meta, field) || file.meta[field] === '') {\n        missingFields.push(field)\n      }\n    }\n\n    return { missingFields, error }\n  }\n}\n\nexport { Restricter, defaultOptions, RestrictionError }\n"],"mappings":"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"}