{"version":3,"names":["has","insertReplacement","source","rx","replacement","newParts","forEach","chunk","push","Symbol","split","raw","i","list","length","interpolate","phrase","options","dollarRegex","dollarBillsYall","interpolated","arg","Object","keys","replace","RegExp","Translator","constructor","locales","locale","strings","pluralize","n","Array","isArray","translate","key","translateArray","join","Error","string","hasPluralForms","smart_count","plural","prevLocale"],"sources":["Translator.js"],"sourcesContent":["import has from './hasProperty.js'\n\nfunction insertReplacement (source, rx, replacement) {\n  const newParts = []\n  source.forEach((chunk) => {\n    // When the source contains multiple placeholders for interpolation,\n    // we should ignore chunks that are not strings, because those\n    // can be JSX objects and will be otherwise incorrectly turned into strings.\n    // Without this condition weâ€™d get this: [object Object] hello [object Object] my <button>\n    if (typeof chunk !== 'string') {\n      return newParts.push(chunk)\n    }\n\n    return rx[Symbol.split](chunk).forEach((raw, i, list) => {\n      if (raw !== '') {\n        newParts.push(raw)\n      }\n\n      // Interlace with the `replacement` value\n      if (i < list.length - 1) {\n        newParts.push(replacement)\n      }\n    })\n  })\n  return newParts\n}\n\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param {string} phrase that needs interpolation, with placeholders\n * @param {object} options with values that will be used to replace placeholders\n * @returns {any[]} interpolated\n */\nfunction interpolate (phrase, options) {\n  const dollarRegex = /\\$/g\n  const dollarBillsYall = '$$$$'\n  let interpolated = [phrase]\n\n  if (options == null) return interpolated\n\n  for (const arg of Object.keys(options)) {\n    if (arg !== '_') {\n      // Ensure replacement value is escaped to prevent special $-prefixed\n      // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n      // be escaped with \"$\" itself, and we need two in the resulting output.\n      let replacement = options[arg]\n      if (typeof replacement === 'string') {\n        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall)\n      }\n      // We create a new `RegExp` each time instead of using a more-efficient\n      // string replace so that the same argument can be replaced multiple times\n      // in the same phrase.\n      interpolated = insertReplacement(interpolated, new RegExp(`%\\\\{${arg}\\\\}`, 'g'), replacement)\n    }\n  }\n\n  return interpolated\n}\n\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\nexport default class Translator {\n  /**\n   * @param {object|Array<object>} locales - locale or list of locales.\n   */\n  constructor (locales) {\n    this.locale = {\n      strings: {},\n      pluralize (n) {\n        if (n === 1) {\n          return 0\n        }\n        return 1\n      },\n    }\n\n    if (Array.isArray(locales)) {\n      locales.forEach(this.#apply, this)\n    } else {\n      this.#apply(locales)\n    }\n  }\n\n  #apply (locale) {\n    if (!locale?.strings) {\n      return\n    }\n\n    const prevLocale = this.locale\n    this.locale = { ...prevLocale, strings: { ...prevLocale.strings, ...locale.strings } }\n    this.locale.pluralize = locale.pluralize || prevLocale.pluralize\n  }\n\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @returns {string} translated (and interpolated)\n   */\n  translate (key, options) {\n    return this.translateArray(key, options).join('')\n  }\n\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used to replace placeholders\n   * @returns {Array} The translated and interpolated parts, in order.\n   */\n  translateArray (key, options) {\n    if (!has(this.locale.strings, key)) {\n      throw new Error(`missing string: ${key}`)\n    }\n\n    const string = this.locale.strings[key]\n    const hasPluralForms = typeof string === 'object'\n\n    if (hasPluralForms) {\n      if (options && typeof options.smart_count !== 'undefined') {\n        const plural = this.locale.pluralize(options.smart_count)\n        return interpolate(string[plural], options)\n      }\n      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}')\n    }\n\n    return interpolate(string, options)\n  }\n}\n"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,kBAAhB;;AAEA,SAASC,iBAAT,CAA4BC,MAA5B,EAAoCC,EAApC,EAAwCC,WAAxC,EAAqD;EACnD,MAAMC,QAAQ,GAAG,EAAjB;EACAH,MAAM,CAACI,OAAP,CAAgBC,KAAD,IAAW;IACxB;IACA;IACA;IACA;IACA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAOF,QAAQ,CAACG,IAAT,CAAcD,KAAd,CAAP;IACD;;IAED,OAAOJ,EAAE,CAACM,MAAM,CAACC,KAAR,CAAF,CAAiBH,KAAjB,EAAwBD,OAAxB,CAAgC,CAACK,GAAD,EAAMC,CAAN,EAASC,IAAT,KAAkB;MACvD,IAAIF,GAAG,KAAK,EAAZ,EAAgB;QACdN,QAAQ,CAACG,IAAT,CAAcG,GAAd;MACD,CAHsD,CAKvD;;;MACA,IAAIC,CAAC,GAAGC,IAAI,CAACC,MAAL,GAAc,CAAtB,EAAyB;QACvBT,QAAQ,CAACG,IAAT,CAAcJ,WAAd;MACD;IACF,CATM,CAAP;EAUD,CAnBD;EAoBA,OAAOC,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,WAAT,CAAsBC,MAAtB,EAA8BC,OAA9B,EAAuC;EACrC,MAAMC,WAAW,GAAG,KAApB;EACA,MAAMC,eAAe,GAAG,MAAxB;EACA,IAAIC,YAAY,GAAG,CAACJ,MAAD,CAAnB;EAEA,IAAIC,OAAO,IAAI,IAAf,EAAqB,OAAOG,YAAP;;EAErB,KAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYN,OAAZ,CAAlB,EAAwC;IACtC,IAAII,GAAG,KAAK,GAAZ,EAAiB;MACf;MACA;MACA;MACA,IAAIjB,WAAW,GAAGa,OAAO,CAACI,GAAD,CAAzB;;MACA,IAAI,OAAOjB,WAAP,KAAuB,QAA3B,EAAqC;QACnCA,WAAW,GAAGc,WAAW,CAACT,MAAM,CAACe,OAAR,CAAX,CAA4BpB,WAA5B,EAAyCe,eAAzC,CAAd;MACD,CAPc,CAQf;MACA;MACA;;;MACAC,YAAY,GAAGnB,iBAAiB,CAACmB,YAAD,EAAe,IAAIK,MAAJ,CAAY,OAAMJ,GAAI,KAAtB,EAA4B,GAA5B,CAAf,EAAiDjB,WAAjD,CAAhC;IACD;EACF;;EAED,OAAOgB,YAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,eAAe,MAAMM,UAAN,CAAiB;EAC9B;AACF;AACA;EACEC,WAAW,CAAEC,OAAF,EAAW;IAAA;MAAA;IAAA;IACpB,KAAKC,MAAL,GAAc;MACZC,OAAO,EAAE,EADG;;MAEZC,SAAS,CAAEC,CAAF,EAAK;QACZ,IAAIA,CAAC,KAAK,CAAV,EAAa;UACX,OAAO,CAAP;QACD;;QACD,OAAO,CAAP;MACD;;IAPW,CAAd;;IAUA,IAAIC,KAAK,CAACC,OAAN,CAAcN,OAAd,CAAJ,EAA4B;MAC1BA,OAAO,CAACtB,OAAR,6BAAgB,IAAhB,mBAA6B,IAA7B;IACD,CAFD,MAEO;MACL,kDAAYsB,OAAZ;IACD;EACF;;EAYD;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,SAAS,CAAEC,GAAF,EAAOnB,OAAP,EAAgB;IACvB,OAAO,KAAKoB,cAAL,CAAoBD,GAApB,EAAyBnB,OAAzB,EAAkCqB,IAAlC,CAAuC,EAAvC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACED,cAAc,CAAED,GAAF,EAAOnB,OAAP,EAAgB;IAC5B,IAAI,CAACjB,GAAG,CAAC,KAAK6B,MAAL,CAAYC,OAAb,EAAsBM,GAAtB,CAAR,EAAoC;MAClC,MAAM,IAAIG,KAAJ,CAAW,mBAAkBH,GAAI,EAAjC,CAAN;IACD;;IAED,MAAMI,MAAM,GAAG,KAAKX,MAAL,CAAYC,OAAZ,CAAoBM,GAApB,CAAf;IACA,MAAMK,cAAc,GAAG,OAAOD,MAAP,KAAkB,QAAzC;;IAEA,IAAIC,cAAJ,EAAoB;MAClB,IAAIxB,OAAO,IAAI,OAAOA,OAAO,CAACyB,WAAf,KAA+B,WAA9C,EAA2D;QACzD,MAAMC,MAAM,GAAG,KAAKd,MAAL,CAAYE,SAAZ,CAAsBd,OAAO,CAACyB,WAA9B,CAAf;QACA,OAAO3B,WAAW,CAACyB,MAAM,CAACG,MAAD,CAAP,EAAiB1B,OAAjB,CAAlB;MACD;;MACD,MAAM,IAAIsB,KAAJ,CAAU,wFAAV,CAAN;IACD;;IAED,OAAOxB,WAAW,CAACyB,MAAD,EAASvB,OAAT,CAAlB;EACD;;AAnE6B;;iBAsBtBY,M,EAAQ;EACd,IAAI,EAACA,MAAD,YAACA,MAAM,CAAEC,OAAT,CAAJ,EAAsB;IACpB;EACD;;EAED,MAAMc,UAAU,GAAG,KAAKf,MAAxB;EACA,KAAKA,MAAL,GAAc,EAAE,GAAGe,UAAL;IAAiBd,OAAO,EAAE,EAAE,GAAGc,UAAU,CAACd,OAAhB;MAAyB,GAAGD,MAAM,CAACC;IAAnC;EAA1B,CAAd;EACA,KAAKD,MAAL,CAAYE,SAAZ,GAAwBF,MAAM,CAACE,SAAP,IAAoBa,UAAU,CAACb,SAAvD;AACD"}