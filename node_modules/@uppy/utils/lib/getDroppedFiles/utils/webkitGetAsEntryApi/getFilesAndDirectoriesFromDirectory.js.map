{"version":3,"names":["getFilesAndDirectoriesFromDirectory","directoryReader","oldEntries","logDropError","onSuccess","readEntries","entries","newEntries","length","queueMicrotask","error"],"sources":["getFilesAndDirectoriesFromDirectory.js"],"sourcesContent":["/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nexport default function getFilesAndDirectoriesFromDirectory (directoryReader, oldEntries, logDropError, { onSuccess }) {\n  directoryReader.readEntries(\n    (entries) => {\n      const newEntries = [...oldEntries, ...entries]\n      // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n      // must be called until it calls the onSuccess with an empty array.\n      if (entries.length) {\n        queueMicrotask(() => {\n          getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, { onSuccess })\n        })\n      // Done iterating this particular directory\n      } else {\n        onSuccess(newEntries)\n      }\n    },\n    // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n    (error) => {\n      logDropError(error)\n      onSuccess(oldEntries)\n    },\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,mCAAT,CAA8CC,eAA9C,EAA+DC,UAA/D,EAA2EC,YAA3E,QAAwG;EAAA,IAAf;IAAEC;EAAF,CAAe;EACrHH,eAAe,CAACI,WAAhB,CACGC,OAAD,IAAa;IACX,MAAMC,UAAU,GAAG,CAAC,GAAGL,UAAJ,EAAgB,GAAGI,OAAnB,CAAnB,CADW,CAEX;IACA;;IACA,IAAIA,OAAO,CAACE,MAAZ,EAAoB;MAClBC,cAAc,CAAC,MAAM;QACnBT,mCAAmC,CAACC,eAAD,EAAkBM,UAAlB,EAA8BJ,YAA9B,EAA4C;UAAEC;QAAF,CAA5C,CAAnC;MACD,CAFa,CAAd,CADkB,CAIpB;IACC,CALD,MAKO;MACLA,SAAS,CAACG,UAAD,CAAT;IACD;EACF,CAbH,EAcE;EACCG,KAAD,IAAW;IACTP,YAAY,CAACO,KAAD,CAAZ;IACAN,SAAS,CAACF,UAAD,CAAT;EACD,CAlBH;AAoBD"}