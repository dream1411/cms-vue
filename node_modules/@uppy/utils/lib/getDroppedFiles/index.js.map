{"version":3,"names":["webkitGetAsEntryApi","fallbackApi","getDroppedFiles","dataTransfer","logDropError","accumulator","file","push"],"sources":["index.js"],"sourcesContent":["import webkitGetAsEntryApi from './utils/webkitGetAsEntryApi/index.js'\nimport fallbackApi from './utils/fallbackApi.js'\n\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param {DataTransfer} dataTransfer\n * @param {Function} logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\nexport default async function getDroppedFiles (dataTransfer, { logDropError = () => {} } = {}) {\n  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n  try {\n    const accumulator = []\n    for await (const file of webkitGetAsEntryApi(dataTransfer, logDropError)) {\n      accumulator.push(file)\n    }\n    return accumulator\n  // Otherwise just return all first-order files\n  } catch {\n    return fallbackApi(dataTransfer)\n  }\n}\n"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,sCAAhC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,eAAeC,eAAf,CAAgCC,YAAhC,SAAgF;EAAA,IAAlC;IAAEC,YAAY,GAAG,MAAM,CAAE;EAAzB,CAAkC,sBAAJ,EAAI;;EAC7F;EACA,IAAI;IACF,MAAMC,WAAW,GAAG,EAApB;;IACA,WAAW,MAAMC,IAAjB,IAAyBN,mBAAmB,CAACG,YAAD,EAAeC,YAAf,CAA5C,EAA0E;MACxEC,WAAW,CAACE,IAAZ,CAAiBD,IAAjB;IACD;;IACD,OAAOD,WAAP,CALE,CAMJ;EACC,CAPD,CAOE,MAAM;IACN,OAAOJ,WAAW,CAACE,YAAD,CAAlB;EACD;AACF"}