{"version":3,"names":["calculateProcessingProgress","files","values","mode","message","progress","Object","preprocess","postprocess","push","value","reduce","total","progressValue","length"],"sources":["calculateProcessingProgress.js"],"sourcesContent":["export default function calculateProcessingProgress (files) {\n  const values = []\n  let mode\n  let message\n\n  for (const { progress } of Object.values(files)) {\n    const { preprocess, postprocess } = progress\n    // In the future we should probably do this differently. For now we'll take the\n    // mode and message from the first fileâ€¦\n    if (message == null && (preprocess || postprocess)) {\n      ({ mode, message } = preprocess || postprocess)\n    }\n    if (preprocess?.mode === 'determinate') values.push(preprocess.value)\n    if (postprocess?.mode === 'determinate') values.push(postprocess.value)\n  }\n\n  const value = values.reduce((total, progressValue) => {\n    return total + progressValue / values.length\n  }, 0)\n\n  return {\n    mode,\n    message,\n    value,\n  }\n}\n"],"mappings":"AAAA,eAAe,SAASA,2BAAT,CAAsCC,KAAtC,EAA6C;EAC1D,MAAMC,MAAM,GAAG,EAAf;EACA,IAAIC,IAAJ;EACA,IAAIC,OAAJ;;EAEA,KAAK,MAAM;IAAEC;EAAF,CAAX,IAA2BC,MAAM,CAACJ,MAAP,CAAcD,KAAd,CAA3B,EAAiD;IAC/C,MAAM;MAAEM,UAAF;MAAcC;IAAd,IAA8BH,QAApC,CAD+C,CAE/C;IACA;;IACA,IAAID,OAAO,IAAI,IAAX,KAAoBG,UAAU,IAAIC,WAAlC,CAAJ,EAAoD;MAClD,CAAC;QAAEL,IAAF;QAAQC;MAAR,IAAoBG,UAAU,IAAIC,WAAnC;IACD;;IACD,IAAI,CAAAD,UAAU,QAAV,YAAAA,UAAU,CAAEJ,IAAZ,MAAqB,aAAzB,EAAwCD,MAAM,CAACO,IAAP,CAAYF,UAAU,CAACG,KAAvB;IACxC,IAAI,CAAAF,WAAW,QAAX,YAAAA,WAAW,CAAEL,IAAb,MAAsB,aAA1B,EAAyCD,MAAM,CAACO,IAAP,CAAYD,WAAW,CAACE,KAAxB;EAC1C;;EAED,MAAMA,KAAK,GAAGR,MAAM,CAACS,MAAP,CAAc,CAACC,KAAD,EAAQC,aAAR,KAA0B;IACpD,OAAOD,KAAK,GAAGC,aAAa,GAAGX,MAAM,CAACY,MAAtC;EACD,CAFa,EAEX,CAFW,CAAd;EAIA,OAAO;IACLX,IADK;IAELC,OAFK;IAGLM;EAHK,CAAP;AAKD"}